'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var path = require('path');
var fs = require('fs');
var http = require('http');
var streamRenderer = require('./renderer/stream-renderer').default;

var CRA_CLIENT_PORT = process.env.CRA_CLIENT_PORT || 3000;

function handleDevMode(req, res, options) {
  http.get('http://localhost:' + CRA_CLIENT_PORT + '/index.html', function (result) {
    result.setEncoding('utf8');
    var htmlData = '';
    result.on('data', function (chunk) {
      htmlData += chunk;
    });
    result.on('end', function () {
      processRequest(req, res, htmlData, options);
    });
  }).on('error', function (e) {
    console.error(e.message);
    return res.status(404).end();
  });
}

function createUniversalMiddleware(options) {
  var clientBuildPath = options.clientBuildPath;


  function universalLoader(req, res) {
    if (process.env.NODE_ENV === 'development') {
      handleDevMode(req, res, options);
      return;
    }

    var filePath = path.resolve(clientBuildPath, 'index.html');

    fs.readFile(filePath, 'utf8', function (err, htmlData) {
      if (err) {
        console.error('read err', err);
        return res.status(404).end();
      }

      processRequest(req, res, htmlData, options);
    });
  }

  return universalLoader;
}

function processRequest(req, res, htmlData, options) {
  var universalRender = options.universalRender,
      _options$handleRender = options.handleRender,
      handleRender = _options$handleRender === undefined ? streamRenderer : _options$handleRender;

  var data = universalRender(req, res);

  if (data === undefined) {
    return;
  }

  if (data instanceof Promise) {
    data.then(function (resolvedData) {
      if (resolvedData === undefined) {
        return;
      }
      handleRender(req, res, resolvedData, htmlData, options);
    });
    return;
  }

  handleRender(req, res, data, htmlData, options);
}

exports.default = createUniversalMiddleware;